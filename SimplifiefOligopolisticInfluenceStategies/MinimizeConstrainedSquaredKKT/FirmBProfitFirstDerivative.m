function [Db] = FirmBProfitFirstDerivative(C,G,LA,LB,PA,PB,alpha,beta,gamma,TA,TB)

% This function evaluates the first derivative of the profit for Firm B for 
% the Simplified Oligopolistic Optimal Influence Model. The derivative value 
% (Db) is evaluated either on a single pair of (TA,TB) values or on a 
% meshgrid of all possible  (TA,TB) pairs which is constructed by  
% corresponding vector of the form tA = [ta_min:dt:ta_max] and  
% tB = [tb_min:dt:tb_max], given the external optimization parameters. 
%  Mind that the correct construction of the meshgrid implies that the 
% lengths of the initial vectors tA and tB are equal.

% Db will be composed by the polynomial coefficients and corresponding
% monomial terms of Ub(TA,TB) and Vb(TA,TB) such that:
%             Db = Ub / Vb
%             Ub ---> {CUb,TVb} and Qb ---> {CVb,TVb} 
% where CXb are the multivariate polynomial coefficients with respect to
% both TA and TB and TXb are the corresponding monomial terms, X in {U,V}.

% Set the vectors of multivariate polynomial coefficients CUb and CVb.
CUb = [ -2*G*LB^3, -6*G*LA*LB^2, -6*G*LA*LB^3, ...
        2*LA*LB^2*alpha*beta - 2*LA*LB^2*beta^2 - 2*LA*LB^2*alpha*gamma + ...
        2*LA*LB^2*beta*gamma - 2*C*LA*LB^2*alpha + 2*C*LA*LB^2*beta, ...
        -6*G*LA^2*LB, -12*G*LA^2*LB^2, 2*LA^2*LB*alpha^2 - 6*G*LA^2*LB^3 - ...
        2*LA^2*LB*alpha*beta - 2*LA^2*LB*alpha*gamma + 2*LA^2*LB*beta*gamma - ...
        2*C*LA^2*LB*alpha + 2*C*LA^2*LB*beta, 2*C*LA^2*LB^2*beta - ...
        4*C*LA^2*LB^2*alpha + 2*LA^2*LB^2*alpha*beta - ...
        4*LA^2*LB^2*alpha*gamma + 2*LA^2*LB^2*beta*gamma + ...
        2*LA^2*LB^2*PB*alpha^2 - 4*LA^2*LB^2*PA*beta^2 + ...
        2*C*LA^2*LB^2*PB*alpha + 2*C*LA^2*LB^2*PA*beta + ...
        2*LA^2*LB^2*PA*alpha*beta - 4*LA^2*LB^2*PB*alpha*beta + ...
        2*LA^2*LB^2*PB*alpha*gamma + 2*LA^2*LB^2*PA*beta*gamma, ...
        -2*G*LA^3, -6*G*LA^3*LB, -6*G*LA^3*LB^2, ...
        2*LA^3*LB*alpha^2 - 2*G*LA^3*LB^3 - 2*LA^3*LB*alpha*gamma - ...
        2*LA^3*LB*PB*alpha^2 - 2*C*LA^3*LB*alpha + 2*C*LA^3*LB*PB*alpha + ...
        2*C*LA^3*LB*PA*beta - 2*LA^3*LB*PA*alpha*beta + ...
        2*LA^3*LB*PB*alpha*gamma + 2*LA^3*LB*PA*beta*gamma, ...
        2*LA^3*LB^2*PB*alpha^2 - 2*LA^3*LB^2*PA^2*beta^2 - ...
        2*C*LA^3*LB^2*alpha - 2*LA^3*LB^2*alpha*gamma - ...
        2*LA^3*LB^2*PB^2*alpha^2 + 2*C*LA^3*LB^2*PB*alpha + ...
        2*C*LA^3*LB^2*PA*beta + 2*LA^3*LB^2*PA*alpha*beta + ...
        2*LA^3*LB^2*PB*alpha*gamma + 2*LA^3*LB^2*PA*beta*gamma - ...
        4*LA^3*LB^2*PA*PB*alpha*beta];

CVb = [ LB^3, 3*LA*LB^2, 3*LA*LB^3, 3*LA^2*LB, 6*LA^2*LB^2, 3*LA^2*LB^3, ...
        LA^3, 3*LA^3*LB, 3*LA^3*LB^2, LA^3*LB^3];

% Get the sizes of input variable TA and TB.
[ra,ca] = size(TA);
[rb,cb] = size(TB);
% Compute the value of Db for the case where TA and TB are single-valued
% vectors.
if(ra*ca*rb*cb==1)
   TUb = [ TA^3*TB, TA^2*TB^2, TA^2*TB, TA^2, TA*TB^3, TA*TB^2, TA*TB, TA, TB^4, TB^3, TB^2, TB, 1];
   TVb = [ TA^3, TA^2*TB, TA^2, TA*TB^2, TA*TB, TA, TB^3, TB^2, TB, 1];
   Ub = CUb * TUb';
   Vb = CVb * TVb';
   Db = Ub ./ Vb;    
% Compute the value of Db for the case where TA and TB are matrices of the
% underlying meshgrid.
else
   TUb = { (TA.^3).*TB, (TA.^2).*(TB.^2), (TA.^2).*TB, TA.^2, TA.*(TB.^3), TA.*(TB.^2), TA.*TB, TA, TB.^4, TB.^3, TB.^2, TB, 1};
   TVb = { TA.^3, (TA.^2).*TB, TA.^2, TA.*(TB.^2), TA.*TB, TA, TB.^3, TB.^2, TB, 1};
   Ub = zeros(ra,ca);
   Vb = zeros(rb,cb);
   for t = 1:1:length(CUb)
      Ub = Ub + CUb(t)*TUb{t};      
   end;
   for t = 1:1:length(CVb)
      Vb = Vb + CVb(t)*TVb{t};
   end;
   Db = Ub ./ Vb;
end;

end

