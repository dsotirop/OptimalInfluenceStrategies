function [DDa] = FirmAProfitSecondDerivative(C,G,LA,LB,PA,PB,alpha,beta,gamma,TA,TB)

% This function evaluates the first derivative of the profit for Firm A for 
% the Simplified Oligopolistic Optimal Influence Model. The derivative value 
% (DDa) is evaluated either on a single pair of (TA,TB) values or on a 
% meshgrid of all possible  (TA,TB) pairs which is constructed by  
% corresponding vector of the form tA = [ta_min:dt:ta_max] and  
% tB = [tb_min:dt:tb_max], given the external optimization parameters. 
%  Mind that the correct construction of the meshgrid implies that the 
% lengths of the initial vectors tA and tB are equal.

% DDa will be composed by the polynomial coefficients and corresponding
% monomial terms of Wa(TA,TB) and Za(TA,TB) such that:
%             DDa = Wa / Za
%             Wa ---> {CWa,TWa} and Za ---> {CZa,TZa} 
% where CXa are the multivariate polynomial coefficients with respect to
% both TA and TB and TXa are the corresponding monomial terms, X in {W,Z}.

% Set the vectors of multivariate polynomial coefficients CWa and CZa.
CWa = [ -2*G*LB^4, -8*G*LA*LB^3, -8*G*LA*LB^4, -12*G*LA^2*LB^2, ...
        -24*G*LA^2*LB^3, -12*G*LA^2*LB^4, -8*G*LA^3*LB, -24*G*LA^3*LB^2, ...
        4*LA*LB^3*alpha*beta - 24*G*LA^3*LB^3 - 4*LA*LB^3*alpha^2 + ...
        4*LA*LB^3*alpha*gamma - 4*LA*LB^3*beta*gamma + 4*C*LA*LB^3*alpha - ...
        4*C*LA*LB^3*beta, 4*LA*LB^4*alpha*gamma - 8*G*LA^3*LB^4 - ...
        4*LA*LB^4*alpha^2 + 4*LA*LB^4*PA*alpha^2 + 4*C*LA*LB^4*alpha - ...
        4*C*LA*LB^4*PA*alpha - 4*C*LA*LB^4*PB*beta + 4*LA*LB^4*PB*alpha*beta ...
        - 4*LA*LB^4*PA*alpha*gamma - 4*LA*LB^4*PB*beta*gamma, -2*G*LA^4, ...
        -8*G*LA^4*LB, 2*LA^2*LB^2*alpha^2 + 6*LA^2*LB^2*beta^2 - ...
        12*G*LA^4*LB^2 + 4*C*LA^2*LB^2*alpha - 4*C*LA^2*LB^2*beta - ...
        8*LA^2*LB^2*alpha*beta + 4*LA^2*LB^2*alpha*gamma - ...
        4*LA^2*LB^2*beta*gamma, 4*LA^2*LB^3*alpha^2 - ...
        8*G*LA^4*LB^3 + 8*C*LA^2*LB^3*alpha - 4*C*LA^2*LB^3*beta - ...
        8*LA^2*LB^3*alpha*beta + 8*LA^2*LB^3*alpha*gamma - ...
        4*LA^2*LB^3*beta*gamma - 8*LA^2*LB^3*PA*alpha^2 + ...
        12*LA^2*LB^3*PB*beta^2 - 4*C*LA^2*LB^3*PA*alpha - ...
        4*C*LA^2*LB^3*PB*beta + 12*LA^2*LB^3*PA*alpha*beta - ...
        8*LA^2*LB^3*PB*alpha*beta - 4*LA^2*LB^3*PA*alpha*gamma - ...
        4*LA^2*LB^3*PB*beta*gamma, 2*LA^2*LB^4*alpha^2 - 2*G*LA^4*LB^4 + ...
        6*LA^2*LB^4*PA^2*alpha^2 + 6*LA^2*LB^4*PB^2*beta^2 + ...
        4*C*LA^2*LB^4*alpha + 4*LA^2*LB^4*alpha*gamma - ...
        8*LA^2*LB^4*PA*alpha^2 - 4*C*LA^2*LB^4*PA*alpha - ...
        4*C*LA^2*LB^4*PB*beta - 8*LA^2*LB^4*PB*alpha*beta - ...
        4*LA^2*LB^4*PA*alpha*gamma - 4*LA^2*LB^4*PB*beta*gamma + ...
        12*LA^2*LB^4*PA*PB*alpha*beta];

CZa = [ LB^4, 4*LA*LB^3, 4*LA*LB^4, 6*LA^2*LB^2, 12*LA^2*LB^3, 6*LA^2*LB^4, ...
        4*LA^3*LB, 12*LA^3*LB^2, 12*LA^3*LB^3, 4*LA^3*LB^4, LA^4, ...
        4*LA^4*LB, 6*LA^4*LB^2, 4*LA^4*LB^3, LA^4*LB^4];    
    
% Get the sizes of input variable TA and TB.
[ra,ca] = size(TA);
[rb,cb] = size(TB);
% Compute the value of Da for the case where TA and TB are single-valued
% vectors.
if(ra*ca*rb*cb==1)
   TWa = [ TA^4, TA^3*TB, TA^3, TA^2*TB^2, TA^2*TB, TA^2, TA*TB^3, TA*TB^2, TA*TB, TA, TB^4, TB^3, TB^2, TB, 1];
   TZa = [ TA^4, TA^3*TB, TA^3, TA^2*TB^2, TA^2*TB, TA^2, TA*TB^3, TA*TB^2, TA*TB, TA, TB^4, TB^3, TB^2, TB, 1];
   Wa = CWa * TWa';
   Za = CZa * TZa';
   DDa = Wa ./ Za;    
% Compute the value of Da for the case where TA and TB are matrices of the
% underlying meshgrid.
else
   TWa = {TA.^4, (TA.^3).*TB, TA.^3, (TA.^2).*(TB.^2), (TA.^2).*TB, TA.^2, TA.*(TB.^3), TA.*(TB.^2), TA.*TB, TA, TB.^4, TB.^3, TB.^2, TB, 1};
   TZa = { TA.^4, (TA.^3).*TB, TA.^3, (TA.^2).*(TB.^2), (TA.^2).*TB, TA.^2, TA.*(TB.^3), TA.*(TB.^2), TA.*TB, TA, TB.^4, TB.^3, TB.^2, TB, 1};
   Wa = zeros(ra,ca);
   Za = zeros(rb,cb);
   for t = 1:1:length(CWa)
      Wa = Wa + CWa(t)*TWa{t};      
   end
   for t = 1:1:length(CZa)
      Za = Za + CZa(t)*TZa{t};
   end
   DDa = Wa ./ Za;
end   
    
end

